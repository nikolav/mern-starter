yarn run v1.22.15
$ dotenv -e .env.test -- nyc --reporter=html --reporter=text mocha --timeout 20000 --exit --recursive src/tests
http: io.connection:Thu Oct 27 2022 16:44:39 GMT+0200:true


info: server started on port 3344 (test)
  Authentication API
    POST /v1/auth/register
mongoDB connected...
Executing (default): SELECT 1+1 AS result
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'main'
[0mPOST /v1/auth/register [32m201[0m 67.999 ms - 760[0m
      âˆš should register a new user when request is ok (85ms)
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'main' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'messages'
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'messages' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
[0mPOST /v1/auth/register [33m409[0m 50.201 ms - 128[0m
      âˆš should report error when email already exists (55ms)
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'roles'
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'roles' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'roles_users'
[0mPOST /v1/auth/register [33m400[0m 3.229 ms - 160[0m
      âˆš should report error when the email provided is not valid
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'roles_users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'sessions'
[0mPOST /v1/auth/register [33m400[0m 1.722 ms - 254[0m
      âˆš should report error when email and password are not provided
    POST /v1/auth/login
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'sessions' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'token_valid'
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'token_valid' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'uploads'
[0mPOST /v1/auth/login [32m200[0m 42.856 ms - 767[0m
      âˆš should return an accessToken and a refreshToken when email and password matches (49ms)
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'uploads' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
[0mPOST /v1/auth/login [33m400[0m 1.504 ms - 254[0m
      âˆš should report error when email and password are not provided
[0mPOST /v1/auth/login [33m400[0m 1.153 ms - 160[0m
      âˆš should report error when the email provided is not valid
[0mPOST /v1/auth/login [33m401[0m 34.559 ms - 52[0m
      âˆš should report error when email and password don't match (38ms)
    POST /v1/auth/refresh-token
[0mPOST /v1/auth/refresh-token [32m200[0m 74.038 ms - 612[0m
      âˆš should return a new accessToken when refreshToken and email match (123ms)
[0mPOST /v1/auth/refresh-token [33m401[0m 71.953 ms - 56[0m
      âˆš should report error when email and refreshToken don't match (112ms)
[0mPOST /v1/auth/refresh-token [33m400[0m 1.371 ms - 262[0m
      âˆš should report error when email and refreshToken are not provided
[0mPOST /v1/auth/refresh-token [33m401[0m 68.607 ms - 47[0m
      âˆš should report error when the refreshToken is expired (111ms)
    POST /v1/auth/send-password-reset
[0mPOST /v1/auth/send-password-reset [32m200[0m 75.487 ms - 9[0m
      âˆš should send an email with password reset link when email matches a user (116ms)
[0mPOST /v1/auth/send-password-reset [33m401[0m 34.182 ms - 57[0m
      âˆš should report error when email doesn't match a user (90ms)
[0mPOST /v1/auth/send-password-reset [33m400[0m 1.339 ms - 150[0m
      âˆš should report error when email is not provided
    POST /v1/auth/reset-password
[0mPOST /v1/auth/reset-password [32m200[0m 118.618 ms - 18[0m
      âˆš should update password and send confirmation email when email and reset token are valid (173ms)
[0mPOST /v1/auth/reset-password [33m401[0m 33.686 ms - 57[0m
      âˆš should report error when email and reset token doesn't match a user (87ms)
[0mPOST /v1/auth/reset-password [33m400[0m 1.202 ms - 150[0m
      âˆš should report error when email is not provided
[0mPOST /v1/auth/reset-password [33m400[0m 1.283 ms - 160[0m
      âˆš should report error when reset token is not provided
[0mPOST /v1/auth/reset-password [33m400[0m 1.177 ms - 156[0m
      âˆš should report error when password is not provided
[0mPOST /v1/auth/reset-password [33m401[0m 36.910 ms - 47[0m
      âˆš should report error when the resetToken is expired (77ms)

  @FakePosts --online
[0mPOST /v1/auth/login [32m200[0m 35.524 ms - 743[0m
Executing (644e8d9b-f649-493e-ba0b-2673dea263b6): START TRANSACTION;
Executing (644e8d9b-f649-493e-ba0b-2673dea263b6): SELECT "id", "user_id", "data", "createdAt", "updatedAt" FROM "sessions" AS "Session" WHERE "Session"."user_id" = '635a995ca5f3f32a48c0bddb' LIMIT 1;
Executing (644e8d9b-f649-493e-ba0b-2673dea263b6): CREATE OR REPLACE FUNCTION pg_temp.testfunc(OUT response "sessions", OUT sequelize_caught_exception text) RETURNS RECORD AS $func_04f787eb2bf74d6da75da67b116d4ed8$ BEGIN INSERT INTO "sessions" ("id","user_id","data","createdAt","updatedAt") VALUES ('1d8c6a7e-4236-4e83-832b-a0afeb606b1b','635a995ca5f3f32a48c0bddb','H4sIAAAAAAAACquuBQBDv6ajAgAAAA==','2022-10-27 14:44:44.721 +00:00','2022-10-27 14:44:44.721 +00:00') RETURNING * INTO response; EXCEPTION WHEN unique_violation THEN GET STACKED DIAGNOSTICS sequelize_caught_exception = PG_EXCEPTION_DETAIL; END $func_04f787eb2bf74d6da75da67b116d4ed8$ LANGUAGE plpgsql; SELECT (testfunc.response)."id", (testfunc.response)."user_id", (testfunc.response)."data", (testfunc.response)."createdAt", (testfunc.response)."updatedAt", testfunc.sequelize_caught_exception FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc();
Executing (644e8d9b-f649-493e-ba0b-2673dea263b6): COMMIT;
[0mPOST /v1/graphql [32m200[0m 413.243 ms - -[0m
    âˆš allows authenticated user to access fake posts testing data (460ms)
[0mPOST /v1/auth/login [32m200[0m 59.406 ms - 743[0m
Executing (24085ca7-9b0d-46b8-a079-bbd9741d0659): START TRANSACTION;
Executing (24085ca7-9b0d-46b8-a079-bbd9741d0659): SELECT "id", "user_id", "data", "createdAt", "updatedAt" FROM "sessions" AS "Session" WHERE "Session"."user_id" = '635a995ca5f3f32a48c0bddb' LIMIT 1;
Executing (24085ca7-9b0d-46b8-a079-bbd9741d0659): COMMIT;
[0mPOST /v1/graphql [32m200[0m 372.454 ms - 136[0m
    âˆš allows authenticated user to access fake user accounts testing data (439ms)
[0mPOST /v1/graphql [33m401[0m 1.646 ms - 38[0m
    âˆš doesnt allow unauthenticated request to testing data

  @ApolloGraphql --inits
Executing (3cc3e27d-698b-4c43-8089-611eba536abf): START TRANSACTION;
Executing (3cc3e27d-698b-4c43-8089-611eba536abf): SELECT "id", "user_id", "data", "createdAt", "updatedAt" FROM "sessions" AS "Session" WHERE "Session"."user_id" = '635a995da5f3f32a48c0bde8' LIMIT 1;
Executing (3cc3e27d-698b-4c43-8089-611eba536abf): CREATE OR REPLACE FUNCTION pg_temp.testfunc(OUT response "sessions", OUT sequelize_caught_exception text) RETURNS RECORD AS $func_810d8407c4094deb881aef2c47775ec6$ BEGIN INSERT INTO "sessions" ("id","user_id","data","createdAt","updatedAt") VALUES ('fe7f02c7-4a6d-48f6-aae2-f3730c93dfb6','635a995da5f3f32a48c0bde8','H4sIAAAAAAAACquuBQBDv6ajAgAAAA==','2022-10-27 14:44:45.749 +00:00','2022-10-27 14:44:45.749 +00:00') RETURNING * INTO response; EXCEPTION WHEN unique_violation THEN GET STACKED DIAGNOSTICS sequelize_caught_exception = PG_EXCEPTION_DETAIL; END $func_810d8407c4094deb881aef2c47775ec6$ LANGUAGE plpgsql; SELECT (testfunc.response)."id", (testfunc.response)."user_id", (testfunc.response)."data", (testfunc.response)."createdAt", (testfunc.response)."updatedAt", testfunc.sequelize_caught_exception FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc();
Executing (3cc3e27d-698b-4c43-8089-611eba536abf): COMMIT;
[0mPOST /v1/graphql [32m200[0m 264.229 ms - 30[0m
    âˆš apollo online (267ms)
[0mPOST /v1/graphql [33m401[0m 1.265 ms - 38[0m
    âˆš unauthorized request to graphql data fails

  @MailRoute
Executing (10a1af08-b1e1-4d69-9b93-e0a1ce5fd773): START TRANSACTION;
Executing (10a1af08-b1e1-4d69-9b93-e0a1ce5fd773): SELECT "id", "name", "createdAt", "updatedAt" FROM "roles" AS "Role" WHERE "Role"."name" = 'email-service-access';
Executing (10a1af08-b1e1-4d69-9b93-e0a1ce5fd773): COMMIT;
Executing (164f9ae4-3404-408f-8e77-0868f15690be): START TRANSACTION;
Executing (164f9ae4-3404-408f-8e77-0868f15690be): SELECT "id", "userId", "roleId", "createdAt", "updatedAt" FROM "roles_users" AS "RoleUser" WHERE "RoleUser"."userId" = '635a995ea5f3f32a48c0bdf2' AND "RoleUser"."roleId" = '9054379a-cb19-45e2-b8f4-f10973f9c2fe' LIMIT 1;
Executing (164f9ae4-3404-408f-8e77-0868f15690be): CREATE OR REPLACE FUNCTION pg_temp.testfunc(OUT response "roles_users", OUT sequelize_caught_exception text) RETURNS RECORD AS $func_5aff370a87a443a9a662c74eda24f405$ BEGIN INSERT INTO "roles_users" ("id","userId","roleId","createdAt","updatedAt") VALUES ('bc3f551c-deac-447d-a599-0ab07b9a2581','635a995ea5f3f32a48c0bdf2','9054379a-cb19-45e2-b8f4-f10973f9c2fe','2022-10-27 14:44:46.399 +00:00','2022-10-27 14:44:46.399 +00:00') RETURNING * INTO response; EXCEPTION WHEN unique_violation THEN GET STACKED DIAGNOSTICS sequelize_caught_exception = PG_EXCEPTION_DETAIL; END $func_5aff370a87a443a9a662c74eda24f405$ LANGUAGE plpgsql; SELECT (testfunc.response)."id", (testfunc.response)."userId", (testfunc.response)."roleId", (testfunc.response)."createdAt", (testfunc.response)."updatedAt", testfunc.sequelize_caught_exception FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc();
Executing (164f9ae4-3404-408f-8e77-0868f15690be): COMMIT;
Executing (2b5429ac-92d7-4343-8a54-5e2440738167): START TRANSACTION;
Executing (2b5429ac-92d7-4343-8a54-5e2440738167): SELECT "id", "user_id", "data", "createdAt", "updatedAt" FROM "sessions" AS "Session" WHERE "Session"."user_id" = '635a995ea5f3f32a48c0bdf2' LIMIT 1;
Executing (2b5429ac-92d7-4343-8a54-5e2440738167): CREATE OR REPLACE FUNCTION pg_temp.testfunc(OUT response "sessions", OUT sequelize_caught_exception text) RETURNS RECORD AS $func_e65652a1e45840c9a0045b5de32d0930$ BEGIN INSERT INTO "sessions" ("id","user_id","data","createdAt","updatedAt") VALUES ('6450593f-7044-4fc7-beb9-c977253e5841','635a995ea5f3f32a48c0bdf2','H4sIAAAAAAAACquuBQBDv6ajAgAAAA==','2022-10-27 14:44:46.741 +00:00','2022-10-27 14:44:46.741 +00:00') RETURNING * INTO response; EXCEPTION WHEN unique_violation THEN GET STACKED DIAGNOSTICS sequelize_caught_exception = PG_EXCEPTION_DETAIL; END $func_e65652a1e45840c9a0045b5de32d0930$ LANGUAGE plpgsql; SELECT (testfunc.response)."id", (testfunc.response)."user_id", (testfunc.response)."data", (testfunc.response)."createdAt", (testfunc.response)."updatedAt", testfunc.sequelize_caught_exception FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc();
Executing (2b5429ac-92d7-4343-8a54-5e2440738167): COMMIT;
Executing (default): SELECT "roleId" FROM "roles_users" AS "RoleUser" WHERE "RoleUser"."userId" = '635a995ea5f3f32a48c0bdf2';
Executing (default): SELECT "id", "name", "createdAt", "updatedAt" FROM "roles" AS "Role" WHERE "Role"."id" IN ('9054379a-cb19-45e2-b8f4-f10973f9c2fe');
[0mPOST /v1/mail/text-message [32m201[0m 388.716 ms - 24[0m
    âˆš authenticated user with mail access policy can send text message emails (392ms)
Executing (9885994a-193c-44d5-8a69-52f815324700): START TRANSACTION;
Executing (9885994a-193c-44d5-8a69-52f815324700): SELECT "id", "user_id", "data", "createdAt", "updatedAt" FROM "sessions" AS "Session" WHERE "Session"."user_id" = '635a995ea5f3f32a48c0bdf2' LIMIT 1;
Executing (9885994a-193c-44d5-8a69-52f815324700): COMMIT;
Executing (default): SELECT "roleId" FROM "roles_users" AS "RoleUser" WHERE "RoleUser"."userId" = '635a995ea5f3f32a48c0bdf2';
Executing (default): SELECT "id", "name", "createdAt", "updatedAt" FROM "roles" AS "Role" WHERE "Role"."id" IN ('9054379a-cb19-45e2-b8f4-f10973f9c2fe');
[0mPOST /v1/mail/text-message [33m400[0m 395.178 ms - 67[0m
    âˆš sendMail fails if no <mail:to> provided (399ms)
Executing (3012ca44-6455-402f-9733-0d97eeae8f4f): START TRANSACTION;
Executing (3012ca44-6455-402f-9733-0d97eeae8f4f): SELECT "id", "user_id", "data", "createdAt", "updatedAt" FROM "sessions" AS "Session" WHERE "Session"."user_id" = '635a995ea5f3f32a48c0bdf2' LIMIT 1;
Executing (3012ca44-6455-402f-9733-0d97eeae8f4f): COMMIT;
Executing (default): SELECT "roleId" FROM "roles_users" AS "RoleUser" WHERE "RoleUser"."userId" = '635a995ea5f3f32a48c0bdf2';
Executing (default): SELECT "id", "name", "createdAt", "updatedAt" FROM "roles" AS "Role" WHERE "Role"."id" IN ('9054379a-cb19-45e2-b8f4-f10973f9c2fe');
[0mPOST /v1/mail/text-message [33m400[0m 326.081 ms - 72[0m
    âˆš sendMail fails if no <mail:subject> provided (329ms)
Executing (93a8c345-b803-4ca7-9e01-7c72b8daa31c): START TRANSACTION;
Executing (93a8c345-b803-4ca7-9e01-7c72b8daa31c): SELECT "id", "user_id", "data", "createdAt", "updatedAt" FROM "sessions" AS "Session" WHERE "Session"."user_id" = '635a995ea5f3f32a48c0bdf2' LIMIT 1;
Executing (93a8c345-b803-4ca7-9e01-7c72b8daa31c): COMMIT;
Executing (default): SELECT "roleId" FROM "roles_users" AS "RoleUser" WHERE "RoleUser"."userId" = '635a995ea5f3f32a48c0bdf2';
Executing (default): SELECT "id", "name", "createdAt", "updatedAt" FROM "roles" AS "Role" WHERE "Role"."id" IN ('9054379a-cb19-45e2-b8f4-f10973f9c2fe');
[0mPOST /v1/mail/text-message [33m400[0m 335.280 ms - 72[0m
    âˆš sendMail fails if no <mail:message> provided (338ms)
Executing (42a08212-0e2a-434e-82f2-de5397f72cc5): START TRANSACTION;
Executing (42a08212-0e2a-434e-82f2-de5397f72cc5): SELECT "id", "user_id", "data", "createdAt", "updatedAt" FROM "sessions" AS "Session" WHERE "Session"."user_id" = '635a995ea5f3f32a48c0bdf4' LIMIT 1;
Executing (42a08212-0e2a-434e-82f2-de5397f72cc5): CREATE OR REPLACE FUNCTION pg_temp.testfunc(OUT response "sessions", OUT sequelize_caught_exception text) RETURNS RECORD AS $func_5d48f08967014227a87f3db52736bbfb$ BEGIN INSERT INTO "sessions" ("id","user_id","data","createdAt","updatedAt") VALUES ('84d16bba-3a0f-474d-bbe0-4baf5530090c','635a995ea5f3f32a48c0bdf4','H4sIAAAAAAAACquuBQBDv6ajAgAAAA==','2022-10-27 14:44:48.184 +00:00','2022-10-27 14:44:48.184 +00:00') RETURNING * INTO response; EXCEPTION WHEN unique_violation THEN GET STACKED DIAGNOSTICS sequelize_caught_exception = PG_EXCEPTION_DETAIL; END $func_5d48f08967014227a87f3db52736bbfb$ LANGUAGE plpgsql; SELECT (testfunc.response)."id", (testfunc.response)."user_id", (testfunc.response)."data", (testfunc.response)."createdAt", (testfunc.response)."updatedAt", testfunc.sequelize_caught_exception FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc();
Executing (42a08212-0e2a-434e-82f2-de5397f72cc5): COMMIT;
Executing (default): SELECT "roleId" FROM "roles_users" AS "RoleUser" WHERE "RoleUser"."userId" = '635a995ea5f3f32a48c0bdf4';
Executing (default): SELECT "id", "name", "createdAt", "updatedAt" FROM "roles" AS "Role" WHERE "Role"."id" IN (NULL);
[0mPOST /v1/mail/text-message [33m403[0m 367.983 ms - 38[0m
    âˆš doesnt allow authenticated user without mail access policy to use mail service (371ms)

  @Messages --online
[0mPOST /v1/auth/login [32m200[0m 34.008 ms - 743[0m
Executing (3c60ac3e-d9eb-4c64-8c1c-5906912235a0): START TRANSACTION;
Executing (3c60ac3e-d9eb-4c64-8c1c-5906912235a0): SELECT "id", "user_id", "data", "createdAt", "updatedAt" FROM "sessions" AS "Session" WHERE "Session"."user_id" = '635a995ea5f3f32a48c0bdf2' LIMIT 1;
Executing (3c60ac3e-d9eb-4c64-8c1c-5906912235a0): COMMIT;
Executing (default): SELECT "id", "content", "createdAt", "updatedAt" FROM "messages" AS "Message";
[0mPOST /v1/graphql [32m200[0m 267.429 ms - 898[0m
    âˆš allows authenticated user to read messages (308ms)
[0mPOST /v1/auth/login [32m200[0m 34.629 ms - 743[0m
Executing (384ab235-0639-4acd-8cfe-ac4fde222d0d): START TRANSACTION;
Executing (384ab235-0639-4acd-8cfe-ac4fde222d0d): SELECT "id", "user_id", "data", "createdAt", "updatedAt" FROM "sessions" AS "Session" WHERE "Session"."user_id" = '635a995ea5f3f32a48c0bdf2' LIMIT 1;
Executing (384ab235-0639-4acd-8cfe-ac4fde222d0d): COMMIT;
Executing (default): INSERT INTO "messages" ("id","content","createdAt","updatedAt") VALUES ($1,$2,$3,$4) RETURNING "id","content","createdAt","updatedAt";
[0mPOST /v1/graphql [32m201[0m 281.418 ms - 94[0m
    âˆš allows authenticated user to write to messages (323ms)
[0mPOST /v1/auth/login [32m200[0m 48.164 ms - 743[0m
Executing (67a82fa8-71af-4772-ac10-61bfa32bd435): START TRANSACTION;
Executing (67a82fa8-71af-4772-ac10-61bfa32bd435): SELECT "id", "user_id", "data", "createdAt", "updatedAt" FROM "sessions" AS "Session" WHERE "Session"."user_id" = '635a995ea5f3f32a48c0bdf2' LIMIT 1;
Executing (67a82fa8-71af-4772-ac10-61bfa32bd435): COMMIT;
[0mPOST /v1/graphql [33m400[0m 205.142 ms - 148[0m
    âˆš addMessage fails if provided empty @content (270ms)
[0mPOST /v1/auth/login [32m200[0m 36.601 ms - 743[0m
Executing (9401d7ee-85ad-4fc7-9ee4-ea857ffec985): START TRANSACTION;
Executing (9401d7ee-85ad-4fc7-9ee4-ea857ffec985): SELECT "id", "user_id", "data", "createdAt", "updatedAt" FROM "sessions" AS "Session" WHERE "Session"."user_id" = '635a995ea5f3f32a48c0bdf2' LIMIT 1;
Executing (9401d7ee-85ad-4fc7-9ee4-ea857ffec985): COMMIT;
Executing (default): SELECT "id", "content", "createdAt", "updatedAt" FROM "messages" AS "Message" WHERE "Message"."id" = '94f0bb18-d248-4eed-9b20-f2fd02bad0dc';
[0mPOST /v1/graphql [32m200[0m 258.849 ms - 47[0m
    âˆš allows authenticated user to read one message by id (302ms)
[0mPOST /v1/auth/login [32m200[0m 35.228 ms - 743[0m
Executing (7ad8acc1-7426-48d1-b897-09fc33176c94): START TRANSACTION;
Executing (7ad8acc1-7426-48d1-b897-09fc33176c94): SELECT "id", "user_id", "data", "createdAt", "updatedAt" FROM "sessions" AS "Session" WHERE "Session"."user_id" = '635a995ea5f3f32a48c0bdf2' LIMIT 1;
Executing (7ad8acc1-7426-48d1-b897-09fc33176c94): COMMIT;
Executing (default): DELETE FROM "messages" WHERE "id" = '94f0bb18-d248-4eed-9b20-f2fd02bad0dc'
[0mPOST /v1/graphql [32m200[0m 272.834 ms - 29[0m
    âˆš allows authenticated user to delete from messages (314ms)
[0mPOST /v1/graphql [33m401[0m 1.054 ms - 38[0m
    âˆš doesnt allow unauthenticated request to messages resource

  @RoleAuthGuard --test
Executing (f1b26ba3-12f0-4fc7-92da-20f5f2938273): START TRANSACTION;
Executing (f1b26ba3-12f0-4fc7-92da-20f5f2938273): SELECT "id", "name", "createdAt", "updatedAt" FROM "roles" AS "Role" WHERE "Role"."name" = 'role-test';
Executing (f1b26ba3-12f0-4fc7-92da-20f5f2938273): COMMIT;
Executing (e900011f-7a6c-4395-83de-96e4a2a80eb8): START TRANSACTION;
Executing (e900011f-7a6c-4395-83de-96e4a2a80eb8): SELECT "id", "name", "createdAt", "updatedAt" FROM "roles" AS "Role" WHERE "Role"."name" = 'role2 test';
Executing (e900011f-7a6c-4395-83de-96e4a2a80eb8): COMMIT;
Executing (eb378296-585a-4696-9021-20615c059b63): START TRANSACTION;
Executing (eb378296-585a-4696-9021-20615c059b63): SELECT "id", "userId", "roleId", "createdAt", "updatedAt" FROM "roles_users" AS "RoleUser" WHERE "RoleUser"."userId" = '635a995ea5f3f32a48c0bdf2' AND "RoleUser"."roleId" = 'e4357d2a-f403-479a-9d3f-e70832f2c2b9' LIMIT 1;
Executing (eb378296-585a-4696-9021-20615c059b63): CREATE OR REPLACE FUNCTION pg_temp.testfunc(OUT response "roles_users", OUT sequelize_caught_exception text) RETURNS RECORD AS $func_03045fc58a5a44b1a960240233d81452$ BEGIN INSERT INTO "roles_users" ("id","userId","roleId","createdAt","updatedAt") VALUES ('932347d6-e0dc-43f6-9dfb-1930a2c2333a','635a995ea5f3f32a48c0bdf2','e4357d2a-f403-479a-9d3f-e70832f2c2b9','2022-10-27 14:44:50.691 +00:00','2022-10-27 14:44:50.691 +00:00') RETURNING * INTO response; EXCEPTION WHEN unique_violation THEN GET STACKED DIAGNOSTICS sequelize_caught_exception = PG_EXCEPTION_DETAIL; END $func_03045fc58a5a44b1a960240233d81452$ LANGUAGE plpgsql; SELECT (testfunc.response)."id", (testfunc.response)."userId", (testfunc.response)."roleId", (testfunc.response)."createdAt", (testfunc.response)."updatedAt", testfunc.sequelize_caught_exception FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc();
Executing (eb378296-585a-4696-9021-20615c059b63): COMMIT;
[0mPOST /v1/auth/login [32m200[0m 34.224 ms - 743[0m
Executing (c8f7f267-a295-45dd-b119-04fc69141ba7): START TRANSACTION;
Executing (c8f7f267-a295-45dd-b119-04fc69141ba7): SELECT "id", "user_id", "data", "createdAt", "updatedAt" FROM "sessions" AS "Session" WHERE "Session"."user_id" = '635a995ea5f3f32a48c0bdf2' LIMIT 1;
Executing (c8f7f267-a295-45dd-b119-04fc69141ba7): COMMIT;
Executing (default): SELECT "roleId" FROM "roles_users" AS "RoleUser" WHERE "RoleUser"."userId" = '635a995ea5f3f32a48c0bdf2';
Executing (default): SELECT "id", "name", "createdAt", "updatedAt" FROM "roles" AS "Role" WHERE "Role"."id" IN ('9054379a-cb19-45e2-b8f4-f10973f9c2fe', 'e4357d2a-f403-479a-9d3f-e70832f2c2b9');
[0mGET /v1/testing/test [32m200[0m 315.437 ms - 20[0m
    âˆš allows authenticated user with enough required policies to access guarded route (357ms)
Executing (92afa6ad-0498-4b19-a2a9-e52ac583de68): START TRANSACTION;
Executing (92afa6ad-0498-4b19-a2a9-e52ac583de68): SELECT "id", "name", "createdAt", "updatedAt" FROM "roles" AS "Role" WHERE "Role"."name" = 'role-test';
Executing (92afa6ad-0498-4b19-a2a9-e52ac583de68): COMMIT;
Executing (a4f25a55-d54b-4cd4-8bfa-29c4e4b77b05): START TRANSACTION;
Executing (a4f25a55-d54b-4cd4-8bfa-29c4e4b77b05): SELECT "id", "name", "createdAt", "updatedAt" FROM "roles" AS "Role" WHERE "Role"."name" = 'role2 test';
Executing (a4f25a55-d54b-4cd4-8bfa-29c4e4b77b05): COMMIT;
Executing (d5f90e61-3a55-4555-9330-99b69b8e0738): START TRANSACTION;
Executing (d5f90e61-3a55-4555-9330-99b69b8e0738): SELECT "id", "userId", "roleId", "createdAt", "updatedAt" FROM "roles_users" AS "RoleUser" WHERE "RoleUser"."userId" = '635a995ea5f3f32a48c0bdf2' AND "RoleUser"."roleId" = 'e4357d2a-f403-479a-9d3f-e70832f2c2b9' LIMIT 1;
Executing (d5f90e61-3a55-4555-9330-99b69b8e0738): COMMIT;
[0mPOST /v1/auth/login [32m200[0m 34.806 ms - 741[0m
Executing (c258633f-c135-4df5-a62a-b845fa3463bc): START TRANSACTION;
Executing (c258633f-c135-4df5-a62a-b845fa3463bc): SELECT "id", "user_id", "data", "createdAt", "updatedAt" FROM "sessions" AS "Session" WHERE "Session"."user_id" = '635a9962a5f3f32a48c0be19' LIMIT 1;
Executing (c258633f-c135-4df5-a62a-b845fa3463bc): CREATE OR REPLACE FUNCTION pg_temp.testfunc(OUT response "sessions", OUT sequelize_caught_exception text) RETURNS RECORD AS $func_12f1753ce5c24de2a60a4728e897a9ac$ BEGIN INSERT INTO "sessions" ("id","user_id","data","createdAt","updatedAt") VALUES ('9dad7c02-f88c-40d8-a72e-d262c98700fa','635a9962a5f3f32a48c0be19','H4sIAAAAAAAACquuBQBDv6ajAgAAAA==','2022-10-27 14:44:52.012 +00:00','2022-10-27 14:44:52.012 +00:00') RETURNING * INTO response; EXCEPTION WHEN unique_violation THEN GET STACKED DIAGNOSTICS sequelize_caught_exception = PG_EXCEPTION_DETAIL; END $func_12f1753ce5c24de2a60a4728e897a9ac$ LANGUAGE plpgsql; SELECT (testfunc.response)."id", (testfunc.response)."user_id", (testfunc.response)."data", (testfunc.response)."createdAt", (testfunc.response)."updatedAt", testfunc.sequelize_caught_exception FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc();
Executing (c258633f-c135-4df5-a62a-b845fa3463bc): COMMIT;
Executing (default): SELECT "roleId" FROM "roles_users" AS "RoleUser" WHERE "RoleUser"."userId" = '635a9962a5f3f32a48c0be19';
Executing (default): SELECT "id", "name", "createdAt", "updatedAt" FROM "roles" AS "Role" WHERE "Role"."id" IN (NULL);
[0mGET /v1/testing/test [33m403[0m 369.819 ms - 38[0m
    âˆš doesnt allow authenticated user without required policy to access guarded route (412ms)

  @Session --online
[0mPOST /v1/auth/login [32m200[0m 34.387 ms - 743[0m
Executing (fa449871-95c4-4cd9-baf7-79a4a420996c): START TRANSACTION;
Executing (fa449871-95c4-4cd9-baf7-79a4a420996c): SELECT "id", "user_id", "data", "createdAt", "updatedAt" FROM "sessions" AS "Session" WHERE "Session"."user_id" = '635a995ea5f3f32a48c0bdf2' LIMIT 1;
Executing (fa449871-95c4-4cd9-baf7-79a4a420996c): COMMIT;
[0mPOST /v1/session/635a995ea5f3f32a48c0bdf2 [32m200[0m 201.146 ms - 2[0m
    âˆš allows authenticated user to read session (243ms)
[0mPOST /v1/auth/login [32m200[0m 40.606 ms - 743[0m
Executing (7162a76e-f710-4e93-b623-af229fb8e2f1): START TRANSACTION;
Executing (7162a76e-f710-4e93-b623-af229fb8e2f1): SELECT "id", "user_id", "data", "createdAt", "updatedAt" FROM "sessions" AS "Session" WHERE "Session"."user_id" = '635a995ea5f3f32a48c0bdf2' LIMIT 1;
Executing (7162a76e-f710-4e93-b623-af229fb8e2f1): COMMIT;
Executing (default): UPDATE "sessions" SET "data"=$1,"updatedAt"=$2 WHERE "id" = $3
[0mPOST /v1/session [32m200[0m 270.118 ms - 29[0m
Executing (0018350a-9a37-4b76-b60d-6a5a3c936e99): START TRANSACTION;
Executing (0018350a-9a37-4b76-b60d-6a5a3c936e99): SELECT "id", "user_id", "data", "createdAt", "updatedAt" FROM "sessions" AS "Session" WHERE "Session"."user_id" = '635a995ea5f3f32a48c0bdf2' LIMIT 1;
Executing (0018350a-9a37-4b76-b60d-6a5a3c936e99): COMMIT;
[0mPOST /v1/session/635a995ea5f3f32a48c0bdf2 [32m200[0m 201.085 ms - 29[0m
    âˆš allows authenticated user to write session (521ms)
[0mPOST /v1/auth/login [32m200[0m 35.044 ms - 743[0m
Executing (325d6959-2e02-4585-9453-53ddc8abef61): START TRANSACTION;
Executing (325d6959-2e02-4585-9453-53ddc8abef61): SELECT "id", "user_id", "data", "createdAt", "updatedAt" FROM "sessions" AS "Session" WHERE "Session"."user_id" = '635a995ea5f3f32a48c0bdf2' LIMIT 1;
Executing (325d6959-2e02-4585-9453-53ddc8abef61): COMMIT;
Executing (default): DELETE FROM "sessions" WHERE "user_id" = '635a995ea5f3f32a48c0bdf2'
[0mDELETE /v1/session/635a995ea5f3f32a48c0bdf2 [32m200[0m 259.587 ms - 17[0m
    âˆš allows authenticated user to destroy session (303ms)
[0mPOST /v1/auth/login [32m200[0m 34.899 ms - 741[0m
[0mPOST /v1/session/635a995ea5f3f32a48c0bdf2 [33m403[0m 40.845 ms - 34[0m
    âˆš doesnt allow authenticated user to access other user's session (83ms)

  @Tokens --model
Executing (default): TRUNCATE "token_valid"
Executing (9e70c10c-bb6a-4e1b-be5d-07a93581272b): START TRANSACTION;
Executing (9e70c10c-bb6a-4e1b-be5d-07a93581272b): SELECT "id", "token", "expired", "createdAt", "updatedAt" FROM "token_valid" AS "Tokens" WHERE "Tokens"."token" = 'oj4xnp';
Executing (9e70c10c-bb6a-4e1b-be5d-07a93581272b): CREATE OR REPLACE FUNCTION pg_temp.testfunc(OUT response "token_valid", OUT sequelize_caught_exception text) RETURNS RECORD AS $func_34ac2a4cc95a4f7c850f9c4992fb96ea$ BEGIN INSERT INTO "token_valid" ("id","token","expired","createdAt","updatedAt") VALUES ('ca79bb18-8140-4f23-b100-01262618b484','oj4xnp',false,'2022-10-27 14:44:53.853 +00:00','2022-10-27 14:44:53.853 +00:00') RETURNING * INTO response; EXCEPTION WHEN unique_violation THEN GET STACKED DIAGNOSTICS sequelize_caught_exception = PG_EXCEPTION_DETAIL; END $func_34ac2a4cc95a4f7c850f9c4992fb96ea$ LANGUAGE plpgsql; SELECT (testfunc.response)."id", (testfunc.response)."token", (testfunc.response)."expired", (testfunc.response)."createdAt", (testfunc.response)."updatedAt", testfunc.sequelize_caught_exception FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc();
Executing (9e70c10c-bb6a-4e1b-be5d-07a93581272b): COMMIT;
Executing (default): SELECT "expired" FROM "token_valid" AS "Tokens" WHERE "Tokens"."token" = 'oj4xnp';
    âˆš stores valid tokens (57ms)
Executing (default): SELECT "expired" FROM "token_valid" AS "Tokens" WHERE "Tokens"."token" = 'e9xgqz';
    âˆš validates tokens; @isValid(token); (56ms)
Executing (default): SELECT "updatedAt" FROM "token_valid" AS "Tokens" WHERE "Tokens"."token" = 'oj4xnp';
Executing (default): SELECT "updatedAt" FROM "token_valid" AS "Tokens" WHERE "Tokens"."token" = 'qth7mnq';
    âˆš calculates token age, return UNDEF for invalid (113ms)
Executing (0a83a02c-1e1d-4584-8e61-38cbddc8c35d): START TRANSACTION;
Executing (0a83a02c-1e1d-4584-8e61-38cbddc8c35d): SELECT "id", "token", "expired", "createdAt", "updatedAt" FROM "token_valid" AS "Tokens" WHERE "Tokens"."token" = 'oih51xq';
Executing (0a83a02c-1e1d-4584-8e61-38cbddc8c35d): CREATE OR REPLACE FUNCTION pg_temp.testfunc(OUT response "token_valid", OUT sequelize_caught_exception text) RETURNS RECORD AS $func_14a3b6c6924342018aa5e5026143215f$ BEGIN INSERT INTO "token_valid" ("id","token","expired","createdAt","updatedAt") VALUES ('397f0c92-f80e-490d-ae4f-38640f7da959','oih51xq',false,'2022-10-27 14:44:54.317 +00:00','2022-10-27 14:44:54.317 +00:00') RETURNING * INTO response; EXCEPTION WHEN unique_violation THEN GET STACKED DIAGNOSTICS sequelize_caught_exception = PG_EXCEPTION_DETAIL; END $func_14a3b6c6924342018aa5e5026143215f$ LANGUAGE plpgsql; SELECT (testfunc.response)."id", (testfunc.response)."token", (testfunc.response)."expired", (testfunc.response)."createdAt", (testfunc.response)."updatedAt", testfunc.sequelize_caught_exception FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc();
Executing (0a83a02c-1e1d-4584-8e61-38cbddc8c35d): COMMIT;
Executing (default): SELECT "expired" FROM "token_valid" AS "Tokens" WHERE "Tokens"."token" = 'oih51xq';
Executing (default): DELETE FROM "token_valid" WHERE "token" = 'oih51xq'
Executing (default): SELECT "expired" FROM "token_valid" AS "Tokens" WHERE "Tokens"."token" = 'oih51xq';
    âˆš expires token (399ms)
Executing (default): SELECT count(*) AS "count" FROM "token_valid" AS "Tokens";
Executing (default): SELECT "expired" FROM "token_valid" AS "Tokens" WHERE "Tokens"."token" = 'oj4xnp';
Executing (default): TRUNCATE "token_valid"
Executing (default): SELECT count(*) AS "count" FROM "token_valid" AS "Tokens";
Executing (default): SELECT "expired" FROM "token_valid" AS "Tokens" WHERE "Tokens"."token" = 'oj4xnp';
    âˆš expires all tokens (335ms)

  Users API
    POST /v1/users
Executing (a51728f7-86ed-42cd-9051-29191efe2dde): START TRANSACTION;
Executing (a51728f7-86ed-42cd-9051-29191efe2dde): SELECT "id", "user_id", "data", "createdAt", "updatedAt" FROM "sessions" AS "Session" WHERE "Session"."user_id" = '635a9966a5f3f32a48c0be3f' LIMIT 1;
Executing (a51728f7-86ed-42cd-9051-29191efe2dde): CREATE OR REPLACE FUNCTION pg_temp.testfunc(OUT response "sessions", OUT sequelize_caught_exception text) RETURNS RECORD AS $func_5bde5a3a283e42239a69aea2d8035a66$ BEGIN INSERT INTO "sessions" ("id","user_id","data","createdAt","updatedAt") VALUES ('2f1e2946-fded-41d1-8668-a4d59f0c2e04','635a9966a5f3f32a48c0be3f','H4sIAAAAAAAACquuBQBDv6ajAgAAAA==','2022-10-27 14:44:55.371 +00:00','2022-10-27 14:44:55.371 +00:00') RETURNING * INTO response; EXCEPTION WHEN unique_violation THEN GET STACKED DIAGNOSTICS sequelize_caught_exception = PG_EXCEPTION_DETAIL; END $func_5bde5a3a283e42239a69aea2d8035a66$ LANGUAGE plpgsql; SELECT (testfunc.response)."id", (testfunc.response)."user_id", (testfunc.response)."data", (testfunc.response)."createdAt", (testfunc.response)."updatedAt", testfunc.sequelize_caught_exception FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc();
Executing (a51728f7-86ed-42cd-9051-29191efe2dde): COMMIT;
[0mPOST /v1/users [32m201[0m 299.880 ms - 133[0m
      âˆš should create a new user when request is ok (304ms)
Executing (5cef1e71-bfa9-4583-a17d-e7855138941e): START TRANSACTION;
Executing (5cef1e71-bfa9-4583-a17d-e7855138941e): SELECT "id", "user_id", "data", "createdAt", "updatedAt" FROM "sessions" AS "Session" WHERE "Session"."user_id" = '635a9967a5f3f32a48c0be48' LIMIT 1;
Executing (5cef1e71-bfa9-4583-a17d-e7855138941e): CREATE OR REPLACE FUNCTION pg_temp.testfunc(OUT response "sessions", OUT sequelize_caught_exception text) RETURNS RECORD AS $func_4719c078dcdb4937bfb904a7b5cbbca0$ BEGIN INSERT INTO "sessions" ("id","user_id","data","createdAt","updatedAt") VALUES ('3b01d486-dbe4-4a0b-8a74-c502d6eef405','635a9967a5f3f32a48c0be48','H4sIAAAAAAAACquuBQBDv6ajAgAAAA==','2022-10-27 14:44:55.853 +00:00','2022-10-27 14:44:55.853 +00:00') RETURNING * INTO response; EXCEPTION WHEN unique_violation THEN GET STACKED DIAGNOSTICS sequelize_caught_exception = PG_EXCEPTION_DETAIL; END $func_4719c078dcdb4937bfb904a7b5cbbca0$ LANGUAGE plpgsql; SELECT (testfunc.response)."id", (testfunc.response)."user_id", (testfunc.response)."data", (testfunc.response)."createdAt", (testfunc.response)."updatedAt", testfunc.sequelize_caught_exception FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc();
Executing (5cef1e71-bfa9-4583-a17d-e7855138941e): COMMIT;
[0mPOST /v1/users [32m201[0m 311.293 ms - 130[0m
      âˆš should create a new user and set default role to "user" (314ms)
Executing (5f6d9099-25c3-4057-8d56-030e98b6c3ff): START TRANSACTION;
Executing (5f6d9099-25c3-4057-8d56-030e98b6c3ff): SELECT "id", "user_id", "data", "createdAt", "updatedAt" FROM "sessions" AS "Session" WHERE "Session"."user_id" = '635a9968a5f3f32a48c0be51' LIMIT 1;
Executing (5f6d9099-25c3-4057-8d56-030e98b6c3ff): CREATE OR REPLACE FUNCTION pg_temp.testfunc(OUT response "sessions", OUT sequelize_caught_exception text) RETURNS RECORD AS $func_6de5ffee0b1441ea87e13f1f29b4b769$ BEGIN INSERT INTO "sessions" ("id","user_id","data","createdAt","updatedAt") VALUES ('e55bd474-15c4-49e2-8d93-a198a46035cc','635a9968a5f3f32a48c0be51','H4sIAAAAAAAACquuBQBDv6ajAgAAAA==','2022-10-27 14:44:56.305 +00:00','2022-10-27 14:44:56.305 +00:00') RETURNING * INTO response; EXCEPTION WHEN unique_violation THEN GET STACKED DIAGNOSTICS sequelize_caught_exception = PG_EXCEPTION_DETAIL; END $func_6de5ffee0b1441ea87e13f1f29b4b769$ LANGUAGE plpgsql; SELECT (testfunc.response)."id", (testfunc.response)."user_id", (testfunc.response)."data", (testfunc.response)."createdAt", (testfunc.response)."updatedAt", testfunc.sequelize_caught_exception FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc();
Executing (5f6d9099-25c3-4057-8d56-030e98b6c3ff): COMMIT;
[0mPOST /v1/users [33m409[0m 295.254 ms - 128[0m
      âˆš should report error when email already exists (301ms)
Executing (2a281cf3-6595-4b2e-9123-170a03622dd6): START TRANSACTION;
Executing (2a281cf3-6595-4b2e-9123-170a03622dd6): SELECT "id", "user_id", "data", "createdAt", "updatedAt" FROM "sessions" AS "Session" WHERE "Session"."user_id" = '635a9968a5f3f32a48c0be5a' LIMIT 1;
Executing (2a281cf3-6595-4b2e-9123-170a03622dd6): CREATE OR REPLACE FUNCTION pg_temp.testfunc(OUT response "sessions", OUT sequelize_caught_exception text) RETURNS RECORD AS $func_9da5818b7eae4cab875cace323b986e3$ BEGIN INSERT INTO "sessions" ("id","user_id","data","createdAt","updatedAt") VALUES ('220076e9-37a5-414d-8655-f60e3cf5b410','635a9968a5f3f32a48c0be5a','H4sIAAAAAAAACquuBQBDv6ajAgAAAA==','2022-10-27 14:44:56.742 +00:00','2022-10-27 14:44:56.742 +00:00') RETURNING * INTO response; EXCEPTION WHEN unique_violation THEN GET STACKED DIAGNOSTICS sequelize_caught_exception = PG_EXCEPTION_DETAIL; END $func_9da5818b7eae4cab875cace323b986e3$ LANGUAGE plpgsql; SELECT (testfunc.response)."id", (testfunc.response)."user_id", (testfunc.response)."data", (testfunc.response)."createdAt", (testfunc.response)."updatedAt", testfunc.sequelize_caught_exception FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc();
Executing (2a281cf3-6595-4b2e-9123-170a03622dd6): COMMIT;
[0mPOST /v1/users [33m400[0m 257.207 ms - 150[0m
      âˆš should report error when email is not provided (260ms)
Executing (79c9e916-80ff-4339-bb47-65323861aef3): START TRANSACTION;
Executing (79c9e916-80ff-4339-bb47-65323861aef3): SELECT "id", "user_id", "data", "createdAt", "updatedAt" FROM "sessions" AS "Session" WHERE "Session"."user_id" = '635a9968a5f3f32a48c0be61' LIMIT 1;
Executing (79c9e916-80ff-4339-bb47-65323861aef3): CREATE OR REPLACE FUNCTION pg_temp.testfunc(OUT response "sessions", OUT sequelize_caught_exception text) RETURNS RECORD AS $func_af14e31e894145bbb77307ccd66e0439$ BEGIN INSERT INTO "sessions" ("id","user_id","data","createdAt","updatedAt") VALUES ('1efbb0b6-b2f3-4516-821b-f47a30caf161','635a9968a5f3f32a48c0be61','H4sIAAAAAAAACquuBQBDv6ajAgAAAA==','2022-10-27 14:44:57.264 +00:00','2022-10-27 14:44:57.264 +00:00') RETURNING * INTO response; EXCEPTION WHEN unique_violation THEN GET STACKED DIAGNOSTICS sequelize_caught_exception = PG_EXCEPTION_DETAIL; END $func_af14e31e894145bbb77307ccd66e0439$ LANGUAGE plpgsql; SELECT (testfunc.response)."id", (testfunc.response)."user_id", (testfunc.response)."data", (testfunc.response)."createdAt", (testfunc.response)."updatedAt", testfunc.sequelize_caught_exception FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc();
Executing (79c9e916-80ff-4339-bb47-65323861aef3): COMMIT;
[0mPOST /v1/users [33m400[0m 292.787 ms - 184[0m
      âˆš should report error when password length is less than 6 (297ms)
[0mPOST /v1/users [33m403[0m 32.575 ms - 34[0m
      âˆš should report error when logged user is not an admin
    GET /v1/users
Executing (07f256e7-d5ad-403e-b02a-331a01663ec5): START TRANSACTION;
Executing (07f256e7-d5ad-403e-b02a-331a01663ec5): SELECT "id", "user_id", "data", "createdAt", "updatedAt" FROM "sessions" AS "Session" WHERE "Session"."user_id" = '635a9969a5f3f32a48c0be6f' LIMIT 1;
Executing (07f256e7-d5ad-403e-b02a-331a01663ec5): CREATE OR REPLACE FUNCTION pg_temp.testfunc(OUT response "sessions", OUT sequelize_caught_exception text) RETURNS RECORD AS $func_3f45fe4f31874f04bef640ffeed63f23$ BEGIN INSERT INTO "sessions" ("id","user_id","data","createdAt","updatedAt") VALUES ('c3acac4b-e83c-4071-bd31-dd715ebe8df9','635a9969a5f3f32a48c0be6f','H4sIAAAAAAAACquuBQBDv6ajAgAAAA==','2022-10-27 14:44:57.857 +00:00','2022-10-27 14:44:57.857 +00:00') RETURNING * INTO response; EXCEPTION WHEN unique_violation THEN GET STACKED DIAGNOSTICS sequelize_caught_exception = PG_EXCEPTION_DETAIL; END $func_3f45fe4f31874f04bef640ffeed63f23$ LANGUAGE plpgsql; SELECT (testfunc.response)."id", (testfunc.response)."user_id", (testfunc.response)."data", (testfunc.response)."createdAt", (testfunc.response)."updatedAt", testfunc.sequelize_caught_exception FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc();
Executing (07f256e7-d5ad-403e-b02a-331a01663ec5): COMMIT;
[0mGET /v1/users [32m200[0m 304.239 ms - 272[0m
      âˆš should get all users (371ms)
Executing (d6942af0-39ac-4a5e-b55d-2b7699f6cddb): START TRANSACTION;
Executing (d6942af0-39ac-4a5e-b55d-2b7699f6cddb): SELECT "id", "user_id", "data", "createdAt", "updatedAt" FROM "sessions" AS "Session" WHERE "Session"."user_id" = '635a996aa5f3f32a48c0be79' LIMIT 1;
Executing (d6942af0-39ac-4a5e-b55d-2b7699f6cddb): CREATE OR REPLACE FUNCTION pg_temp.testfunc(OUT response "sessions", OUT sequelize_caught_exception text) RETURNS RECORD AS $func_108a311673af498c92314a26da069e74$ BEGIN INSERT INTO "sessions" ("id","user_id","data","createdAt","updatedAt") VALUES ('4e724aa7-f30e-49a1-8581-5a8a250feeb6','635a996aa5f3f32a48c0be79','H4sIAAAAAAAACquuBQBDv6ajAgAAAA==','2022-10-27 14:44:58.374 +00:00','2022-10-27 14:44:58.374 +00:00') RETURNING * INTO response; EXCEPTION WHEN unique_violation THEN GET STACKED DIAGNOSTICS sequelize_caught_exception = PG_EXCEPTION_DETAIL; END $func_108a311673af498c92314a26da069e74$ LANGUAGE plpgsql; SELECT (testfunc.response)."id", (testfunc.response)."user_id", (testfunc.response)."data", (testfunc.response)."createdAt", (testfunc.response)."updatedAt", testfunc.sequelize_caught_exception FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc();
Executing (d6942af0-39ac-4a5e-b55d-2b7699f6cddb): COMMIT;
[0mGET /v1/users?page=2&perPage=1 [32m200[0m 304.508 ms - 134[0m
      âˆš should get all users with pagination (309ms)
Executing (b00aec23-ff17-4ec0-bc78-1ca6d724ddfb): START TRANSACTION;
Executing (b00aec23-ff17-4ec0-bc78-1ca6d724ddfb): SELECT "id", "user_id", "data", "createdAt", "updatedAt" FROM "sessions" AS "Session" WHERE "Session"."user_id" = '635a996aa5f3f32a48c0be81' LIMIT 1;
Executing (b00aec23-ff17-4ec0-bc78-1ca6d724ddfb): CREATE OR REPLACE FUNCTION pg_temp.testfunc(OUT response "sessions", OUT sequelize_caught_exception text) RETURNS RECORD AS $func_d194d96c73134ef580ef91e857fd9e6f$ BEGIN INSERT INTO "sessions" ("id","user_id","data","createdAt","updatedAt") VALUES ('7e09892b-0884-4fe7-9377-6d20da3f3ef8','635a996aa5f3f32a48c0be81','H4sIAAAAAAAACquuBQBDv6ajAgAAAA==','2022-10-27 14:44:58.803 +00:00','2022-10-27 14:44:58.803 +00:00') RETURNING * INTO response; EXCEPTION WHEN unique_violation THEN GET STACKED DIAGNOSTICS sequelize_caught_exception = PG_EXCEPTION_DETAIL; END $func_d194d96c73134ef580ef91e857fd9e6f$ LANGUAGE plpgsql; SELECT (testfunc.response)."id", (testfunc.response)."user_id", (testfunc.response)."data", (testfunc.response)."createdAt", (testfunc.response)."updatedAt", testfunc.sequelize_caught_exception FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc();
Executing (b00aec23-ff17-4ec0-bc78-1ca6d724ddfb): COMMIT;
[0mGET /v1/users?email=jonsnow%40gmail.com [32m200[0m 303.118 ms - 134[0m
      âˆš should filter users (371ms)
Executing (727ec7c6-2c91-46d1-97ba-d0519f7974ab): START TRANSACTION;
Executing (727ec7c6-2c91-46d1-97ba-d0519f7974ab): SELECT "id", "user_id", "data", "createdAt", "updatedAt" FROM "sessions" AS "Session" WHERE "Session"."user_id" = '635a996ba5f3f32a48c0be8a' LIMIT 1;
Executing (727ec7c6-2c91-46d1-97ba-d0519f7974ab): CREATE OR REPLACE FUNCTION pg_temp.testfunc(OUT response "sessions", OUT sequelize_caught_exception text) RETURNS RECORD AS $func_9ffa9fae34a44467a32f8a9001ddf346$ BEGIN INSERT INTO "sessions" ("id","user_id","data","createdAt","updatedAt") VALUES ('de10a610-2711-4c7c-a7ef-6e5b89881d3d','635a996ba5f3f32a48c0be8a','H4sIAAAAAAAACquuBQBDv6ajAgAAAA==','2022-10-27 14:44:59.335 +00:00','2022-10-27 14:44:59.335 +00:00') RETURNING * INTO response; EXCEPTION WHEN unique_violation THEN GET STACKED DIAGNOSTICS sequelize_caught_exception = PG_EXCEPTION_DETAIL; END $func_9ffa9fae34a44467a32f8a9001ddf346$ LANGUAGE plpgsql; SELECT (testfunc.response)."id", (testfunc.response)."user_id", (testfunc.response)."data", (testfunc.response)."createdAt", (testfunc.response)."updatedAt", testfunc.sequelize_caught_exception FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc();
Executing (727ec7c6-2c91-46d1-97ba-d0519f7974ab): COMMIT;
[0mGET /v1/users?page=%3F&perPage=whaat [33m400[0m 261.296 ms - 260[0m
      âˆš should report error when pagination's parameters are not a number (265ms)
[0mGET /v1/users [33m403[0m 32.239 ms - 34[0m
      âˆš should report error if logged user is not an admin
    GET /v1/users/:userId
Executing (8070d3db-558c-4bab-948b-b89553e68a21): START TRANSACTION;
Executing (8070d3db-558c-4bab-948b-b89553e68a21): SELECT "id", "user_id", "data", "createdAt", "updatedAt" FROM "sessions" AS "Session" WHERE "Session"."user_id" = '635a996ba5f3f32a48c0be98' LIMIT 1;
Executing (8070d3db-558c-4bab-948b-b89553e68a21): CREATE OR REPLACE FUNCTION pg_temp.testfunc(OUT response "sessions", OUT sequelize_caught_exception text) RETURNS RECORD AS $func_336f234c87df4c9f8aaebcc213fa7400$ BEGIN INSERT INTO "sessions" ("id","user_id","data","createdAt","updatedAt") VALUES ('f2e9a9ec-0f39-409f-9ebe-bc9adedbcc4f','635a996ba5f3f32a48c0be98','H4sIAAAAAAAACquuBQBDv6ajAgAAAA==','2022-10-27 14:44:59.995 +00:00','2022-10-27 14:44:59.995 +00:00') RETURNING * INTO response; EXCEPTION WHEN unique_violation THEN GET STACKED DIAGNOSTICS sequelize_caught_exception = PG_EXCEPTION_DETAIL; END $func_336f234c87df4c9f8aaebcc213fa7400$ LANGUAGE plpgsql; SELECT (testfunc.response)."id", (testfunc.response)."user_id", (testfunc.response)."data", (testfunc.response)."createdAt", (testfunc.response)."updatedAt", testfunc.sequelize_caught_exception FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc();
Executing (8070d3db-558c-4bab-948b-b89553e68a21): COMMIT;
[0mGET /v1/users/635a996ba5f3f32a48c0be98 [32m200[0m 303.374 ms - 137[0m
      âˆš should get user (338ms)
[0mGET /v1/users/56c787ccc67fc16ccc1a5e92 [33m404[0m 32.468 ms - 44[0m
      âˆš should report error "User does not exist" when user does not exists
[0mGET /v1/users/palmeiras1914 [33m404[0m 0.855 ms - 44[0m
      âˆš should report error "User does not exist" when id is not a valid ObjectID
[0mGET /v1/users/635a996ca5f3f32a48c0beae [33m403[0m 64.712 ms - 34[0m
      âˆš should report error when logged user is not the same as the requested one (100ms)
    PUT /v1/users/:userId
Executing (8d3feed9-f76b-4720-9025-fe25d20b5ba8): START TRANSACTION;
Executing (8d3feed9-f76b-4720-9025-fe25d20b5ba8): SELECT "id", "user_id", "data", "createdAt", "updatedAt" FROM "sessions" AS "Session" WHERE "Session"."user_id" = '635a996ca5f3f32a48c0beb7' LIMIT 1;
Executing (8d3feed9-f76b-4720-9025-fe25d20b5ba8): CREATE OR REPLACE FUNCTION pg_temp.testfunc(OUT response "sessions", OUT sequelize_caught_exception text) RETURNS RECORD AS $func_6fe2fed19199454f8d8e28d406201255$ BEGIN INSERT INTO "sessions" ("id","user_id","data","createdAt","updatedAt") VALUES ('330506ca-2bf0-469b-aade-8efef5a83ac2','635a996ca5f3f32a48c0beb7','H4sIAAAAAAAACquuBQBDv6ajAgAAAA==','2022-10-27 14:45:01.102 +00:00','2022-10-27 14:45:01.102 +00:00') RETURNING * INTO response; EXCEPTION WHEN unique_violation THEN GET STACKED DIAGNOSTICS sequelize_caught_exception = PG_EXCEPTION_DETAIL; END $func_6fe2fed19199454f8d8e28d406201255$ LANGUAGE plpgsql; SELECT (testfunc.response)."id", (testfunc.response)."user_id", (testfunc.response)."data", (testfunc.response)."createdAt", (testfunc.response)."updatedAt", testfunc.sequelize_caught_exception FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc();
Executing (8d3feed9-f76b-4720-9025-fe25d20b5ba8): COMMIT;
[0mPUT /v1/users/635a996ca5f3f32a48c0beb7 [32m200[0m 378.341 ms - 130[0m
      âˆš should replace user (414ms)
Executing (12e2c87a-68cd-43a4-92cb-280af3ed1f71): START TRANSACTION;
Executing (12e2c87a-68cd-43a4-92cb-280af3ed1f71): SELECT "id", "user_id", "data", "createdAt", "updatedAt" FROM "sessions" AS "Session" WHERE "Session"."user_id" = '635a996da5f3f32a48c0bec3' LIMIT 1;
Executing (12e2c87a-68cd-43a4-92cb-280af3ed1f71): CREATE OR REPLACE FUNCTION pg_temp.testfunc(OUT response "sessions", OUT sequelize_caught_exception text) RETURNS RECORD AS $func_8f4c9008ca0d43258b39887db06163a3$ BEGIN INSERT INTO "sessions" ("id","user_id","data","createdAt","updatedAt") VALUES ('90985b3b-a1d1-444a-b6d9-32ebd40e4683','635a996da5f3f32a48c0bec3','H4sIAAAAAAAACquuBQBDv6ajAgAAAA==','2022-10-27 14:45:01.732 +00:00','2022-10-27 14:45:01.732 +00:00') RETURNING * INTO response; EXCEPTION WHEN unique_violation THEN GET STACKED DIAGNOSTICS sequelize_caught_exception = PG_EXCEPTION_DETAIL; END $func_8f4c9008ca0d43258b39887db06163a3$ LANGUAGE plpgsql; SELECT (testfunc.response)."id", (testfunc.response)."user_id", (testfunc.response)."data", (testfunc.response)."createdAt", (testfunc.response)."updatedAt", testfunc.sequelize_caught_exception FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc();
Executing (12e2c87a-68cd-43a4-92cb-280af3ed1f71): COMMIT;
[0mPUT /v1/users/635a996da5f3f32a48c0bec3 [33m400[0m 345.231 ms - 150[0m
      âˆš should report error when email is not provided (381ms)
Executing (66df686b-236d-419a-b210-cb19b23c7bc9): START TRANSACTION;
Executing (66df686b-236d-419a-b210-cb19b23c7bc9): SELECT "id", "user_id", "data", "createdAt", "updatedAt" FROM "sessions" AS "Session" WHERE "Session"."user_id" = '635a996da5f3f32a48c0becc' LIMIT 1;
Executing (66df686b-236d-419a-b210-cb19b23c7bc9): CREATE OR REPLACE FUNCTION pg_temp.testfunc(OUT response "sessions", OUT sequelize_caught_exception text) RETURNS RECORD AS $func_b2c5d50d8e5e45c889ad6a1e5811d6b6$ BEGIN INSERT INTO "sessions" ("id","user_id","data","createdAt","updatedAt") VALUES ('82a4b09a-785a-4c4e-a6b6-75eeb9c72bd0','635a996da5f3f32a48c0becc','H4sIAAAAAAAACquuBQBDv6ajAgAAAA==','2022-10-27 14:45:02.217 +00:00','2022-10-27 14:45:02.217 +00:00') RETURNING * INTO response; EXCEPTION WHEN unique_violation THEN GET STACKED DIAGNOSTICS sequelize_caught_exception = PG_EXCEPTION_DETAIL; END $func_b2c5d50d8e5e45c889ad6a1e5811d6b6$ LANGUAGE plpgsql; SELECT (testfunc.response)."id", (testfunc.response)."user_id", (testfunc.response)."data", (testfunc.response)."createdAt", (testfunc.response)."updatedAt", testfunc.sequelize_caught_exception FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc();
Executing (66df686b-236d-419a-b210-cb19b23c7bc9): COMMIT;
[0mPUT /v1/users/635a996da5f3f32a48c0becc [33m400[0m 306.239 ms - 184[0m
      âˆš should report error user when password length is less than 6 (341ms)
[0mPUT /v1/users/palmeiras1914 [33m404[0m 0.717 ms - 44[0m
      âˆš should report error "User does not exist" when user does not exists
[0mPUT /v1/users/635a996ea5f3f32a48c0bedb [33m403[0m 75.372 ms - 34[0m
      âˆš should report error when logged user is not the same as the requested one (112ms)
Executing (f735061b-dff5-44e1-bf04-4934e9f2fdc7): START TRANSACTION;
Executing (f735061b-dff5-44e1-bf04-4934e9f2fdc7): SELECT "id", "user_id", "data", "createdAt", "updatedAt" FROM "sessions" AS "Session" WHERE "Session"."user_id" = '635a996ea5f3f32a48c0bee5' LIMIT 1;
Executing (f735061b-dff5-44e1-bf04-4934e9f2fdc7): CREATE OR REPLACE FUNCTION pg_temp.testfunc(OUT response "sessions", OUT sequelize_caught_exception text) RETURNS RECORD AS $func_81b5217d9a7f44369cfde6a2fd2beafb$ BEGIN INSERT INTO "sessions" ("id","user_id","data","createdAt","updatedAt") VALUES ('69424e69-49c4-4738-a896-34662bdaae43','635a996ea5f3f32a48c0bee5','H4sIAAAAAAAACquuBQBDv6ajAgAAAA==','2022-10-27 14:45:03.163 +00:00','2022-10-27 14:45:03.163 +00:00') RETURNING * INTO response; EXCEPTION WHEN unique_violation THEN GET STACKED DIAGNOSTICS sequelize_caught_exception = PG_EXCEPTION_DETAIL; END $func_81b5217d9a7f44369cfde6a2fd2beafb$ LANGUAGE plpgsql; SELECT (testfunc.response)."id", (testfunc.response)."user_id", (testfunc.response)."data", (testfunc.response)."createdAt", (testfunc.response)."updatedAt", testfunc.sequelize_caught_exception FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc();
Executing (f735061b-dff5-44e1-bf04-4934e9f2fdc7): COMMIT;
[0mPUT /v1/users/635a996ea5f3f32a48c0bee5 [32m200[0m 415.469 ms - 132[0m
      âˆš should not replace the role of the user (not admin) (469ms)
    PATCH /v1/users/:userId
Executing (0bb0ad45-bffe-4b6e-8d21-9fc6e7557100): START TRANSACTION;
Executing (0bb0ad45-bffe-4b6e-8d21-9fc6e7557100): SELECT "id", "user_id", "data", "createdAt", "updatedAt" FROM "sessions" AS "Session" WHERE "Session"."user_id" = '635a996fa5f3f32a48c0bef0' LIMIT 1;
Executing (0bb0ad45-bffe-4b6e-8d21-9fc6e7557100): CREATE OR REPLACE FUNCTION pg_temp.testfunc(OUT response "sessions", OUT sequelize_caught_exception text) RETURNS RECORD AS $func_9a2ce2c050a04ee6bbac64fa5473f962$ BEGIN INSERT INTO "sessions" ("id","user_id","data","createdAt","updatedAt") VALUES ('385a0b81-93ba-4901-8d7b-b87afcabd075','635a996fa5f3f32a48c0bef0','H4sIAAAAAAAACquuBQBDv6ajAgAAAA==','2022-10-27 14:45:03.782 +00:00','2022-10-27 14:45:03.782 +00:00') RETURNING * INTO response; EXCEPTION WHEN unique_violation THEN GET STACKED DIAGNOSTICS sequelize_caught_exception = PG_EXCEPTION_DETAIL; END $func_9a2ce2c050a04ee6bbac64fa5473f962$ LANGUAGE plpgsql; SELECT (testfunc.response)."id", (testfunc.response)."user_id", (testfunc.response)."data", (testfunc.response)."createdAt", (testfunc.response)."updatedAt", testfunc.sequelize_caught_exception FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc();
Executing (0bb0ad45-bffe-4b6e-8d21-9fc6e7557100): COMMIT;
[0mPATCH /v1/users/635a996fa5f3f32a48c0bef0 [32m200[0m 339.007 ms - 136[0m
      âˆš should update user (377ms)
Executing (ed0aaec1-ea44-42c7-9dd1-459b04901cfe): START TRANSACTION;
Executing (ed0aaec1-ea44-42c7-9dd1-459b04901cfe): SELECT "id", "user_id", "data", "createdAt", "updatedAt" FROM "sessions" AS "Session" WHERE "Session"."user_id" = '635a996fa5f3f32a48c0befa' LIMIT 1;
Executing (ed0aaec1-ea44-42c7-9dd1-459b04901cfe): CREATE OR REPLACE FUNCTION pg_temp.testfunc(OUT response "sessions", OUT sequelize_caught_exception text) RETURNS RECORD AS $func_095025c73171467d8e65112f54966011$ BEGIN INSERT INTO "sessions" ("id","user_id","data","createdAt","updatedAt") VALUES ('987f1c4f-f8cc-401d-9675-f61849a87160','635a996fa5f3f32a48c0befa','H4sIAAAAAAAACquuBQBDv6ajAgAAAA==','2022-10-27 14:45:04.281 +00:00','2022-10-27 14:45:04.281 +00:00') RETURNING * INTO response; EXCEPTION WHEN unique_violation THEN GET STACKED DIAGNOSTICS sequelize_caught_exception = PG_EXCEPTION_DETAIL; END $func_095025c73171467d8e65112f54966011$ LANGUAGE plpgsql; SELECT (testfunc.response)."id", (testfunc.response)."user_id", (testfunc.response)."data", (testfunc.response)."createdAt", (testfunc.response)."updatedAt", testfunc.sequelize_caught_exception FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc();
Executing (ed0aaec1-ea44-42c7-9dd1-459b04901cfe): COMMIT;
[0mPATCH /v1/users/635a996fa5f3f32a48c0befa [32m200[0m 318.136 ms - 137[0m
      âˆš should not update user when no parameters were given (352ms)
[0mPATCH /v1/users/palmeiras1914 [33m404[0m 0.622 ms - 44[0m
      âˆš should report error "User does not exist" when user does not exists
[0mPATCH /v1/users/635a9970a5f3f32a48c0bf0a [33m403[0m 71.019 ms - 34[0m
      âˆš should report error when logged user is not the same as the requested one (105ms)
Executing (e2e5a9df-8d88-4622-887e-7f4c1ba6cab6): START TRANSACTION;
Executing (e2e5a9df-8d88-4622-887e-7f4c1ba6cab6): SELECT "id", "user_id", "data", "createdAt", "updatedAt" FROM "sessions" AS "Session" WHERE "Session"."user_id" = '635a9970a5f3f32a48c0bf14' LIMIT 1;
Executing (e2e5a9df-8d88-4622-887e-7f4c1ba6cab6): CREATE OR REPLACE FUNCTION pg_temp.testfunc(OUT response "sessions", OUT sequelize_caught_exception text) RETURNS RECORD AS $func_432dd0a7c5c54073a5be5b7318bc510c$ BEGIN INSERT INTO "sessions" ("id","user_id","data","createdAt","updatedAt") VALUES ('7dd31531-db53-4d46-a4e5-5e438186d3e9','635a9970a5f3f32a48c0bf14','H4sIAAAAAAAACquuBQBDv6ajAgAAAA==','2022-10-27 14:45:05.511 +00:00','2022-10-27 14:45:05.511 +00:00') RETURNING * INTO response; EXCEPTION WHEN unique_violation THEN GET STACKED DIAGNOSTICS sequelize_caught_exception = PG_EXCEPTION_DETAIL; END $func_432dd0a7c5c54073a5be5b7318bc510c$ LANGUAGE plpgsql; SELECT (testfunc.response)."id", (testfunc.response)."user_id", (testfunc.response)."data", (testfunc.response)."createdAt", (testfunc.response)."updatedAt", testfunc.sequelize_caught_exception FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc();
Executing (e2e5a9df-8d88-4622-887e-7f4c1ba6cab6): COMMIT;
[0mPATCH /v1/users/635a9970a5f3f32a48c0bf14 [32m200[0m 492.669 ms - 132[0m
      âˆš should not update the role of the user (not admin) (601ms)
    DELETE /v1/users
Executing (d1e50bf8-09ce-4e83-9762-e644e2d4b934): START TRANSACTION;
Executing (d1e50bf8-09ce-4e83-9762-e644e2d4b934): SELECT "id", "user_id", "data", "createdAt", "updatedAt" FROM "sessions" AS "Session" WHERE "Session"."user_id" = '635a9971a5f3f32a48c0bf1d' LIMIT 1;
Executing (d1e50bf8-09ce-4e83-9762-e644e2d4b934): CREATE OR REPLACE FUNCTION pg_temp.testfunc(OUT response "sessions", OUT sequelize_caught_exception text) RETURNS RECORD AS $func_4bb03631458d465699c9a2f6e57d694d$ BEGIN INSERT INTO "sessions" ("id","user_id","data","createdAt","updatedAt") VALUES ('f9dea866-b439-4501-861f-da0b9ab31e61','635a9971a5f3f32a48c0bf1d','H4sIAAAAAAAACquuBQBDv6ajAgAAAA==','2022-10-27 14:45:06.007 +00:00','2022-10-27 14:45:06.007 +00:00') RETURNING * INTO response; EXCEPTION WHEN unique_violation THEN GET STACKED DIAGNOSTICS sequelize_caught_exception = PG_EXCEPTION_DETAIL; END $func_4bb03631458d465699c9a2f6e57d694d$ LANGUAGE plpgsql; SELECT (testfunc.response)."id", (testfunc.response)."user_id", (testfunc.response)."data", (testfunc.response)."createdAt", (testfunc.response)."updatedAt", testfunc.sequelize_caught_exception FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc();
Executing (d1e50bf8-09ce-4e83-9762-e644e2d4b934): COMMIT;
[0mDELETE /v1/users/635a9971a5f3f32a48c0bf1d [32m204[0m 326.275 ms - -[0m
[0mGET /v1/users [33m401[0m 1.204 ms - 38[0m
      âˆš should delete user (394ms)
[0mDELETE /v1/users/palmeiras1914 [33m404[0m 0.592 ms - 44[0m
      âˆš should report error "User does not exist" when user does not exists
[0mDELETE /v1/users/635a9972a5f3f32a48c0bf2e [33m403[0m 64.802 ms - 34[0m
      âˆš should report error when logged user is not the same as the requested one (99ms)
    GET /v1/users/profile
Executing (7008ec3d-cc14-4ceb-ad92-53501ebc06ac): START TRANSACTION;
Executing (7008ec3d-cc14-4ceb-ad92-53501ebc06ac): SELECT "id", "user_id", "data", "createdAt", "updatedAt" FROM "sessions" AS "Session" WHERE "Session"."user_id" = '635a9972a5f3f32a48c0bf38' LIMIT 1;
Executing (7008ec3d-cc14-4ceb-ad92-53501ebc06ac): CREATE OR REPLACE FUNCTION pg_temp.testfunc(OUT response "sessions", OUT sequelize_caught_exception text) RETURNS RECORD AS $func_a1f27d2929364427a4cac82f5ec9335f$ BEGIN INSERT INTO "sessions" ("id","user_id","data","createdAt","updatedAt") VALUES ('6b9db32c-0dcb-441d-98ba-4a9869d01fe8','635a9972a5f3f32a48c0bf38','H4sIAAAAAAAACquuBQBDv6ajAgAAAA==','2022-10-27 14:45:06.887 +00:00','2022-10-27 14:45:06.887 +00:00') RETURNING * INTO response; EXCEPTION WHEN unique_violation THEN GET STACKED DIAGNOSTICS sequelize_caught_exception = PG_EXCEPTION_DETAIL; END $func_a1f27d2929364427a4cac82f5ec9335f$ LANGUAGE plpgsql; SELECT (testfunc.response)."id", (testfunc.response)."user_id", (testfunc.response)."data", (testfunc.response)."createdAt", (testfunc.response)."updatedAt", testfunc.sequelize_caught_exception FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc();
Executing (7008ec3d-cc14-4ceb-ad92-53501ebc06ac): COMMIT;
[0mGET /v1/users/profile [32m200[0m 255.034 ms - 132[0m
      âˆš should get the logged user's info (258ms)
[0mGET /v1/users/profile [33m401[0m 0.000 ms - 36[0m
      âˆš should report error without stacktrace when accessToken is expired (41ms)

  @Variables --online
Executing (23212541-898f-4f45-b48f-06464c195533): START TRANSACTION;
Executing (23212541-898f-4f45-b48f-06464c195533): SELECT "id", "name", "value", "createdAt", "updatedAt" FROM "main" AS "Main" WHERE "Main"."name" = 'test';
Executing (23212541-898f-4f45-b48f-06464c195533): COMMIT;
Executing (default): DELETE FROM "main" WHERE "name" = 'test--destroyed'
    @@ variables
Executing (643df7de-adea-4a49-b6f6-dc92a8aa12d9): START TRANSACTION;
Executing (643df7de-adea-4a49-b6f6-dc92a8aa12d9): SELECT "id", "user_id", "data", "createdAt", "updatedAt" FROM "sessions" AS "Session" WHERE "Session"."user_id" = '0229b63ca5f3f32a48c0bf45' LIMIT 1;
Executing (643df7de-adea-4a49-b6f6-dc92a8aa12d9): CREATE OR REPLACE FUNCTION pg_temp.testfunc(OUT response "sessions", OUT sequelize_caught_exception text) RETURNS RECORD AS $func_ddc2d624b0384b1fa3b58fffb82bdf7f$ BEGIN INSERT INTO "sessions" ("id","user_id","data","createdAt","updatedAt") VALUES ('821a3b16-f0cc-4088-be43-1df6cac570eb','0229b63ca5f3f32a48c0bf45','H4sIAAAAAAAACquuBQBDv6ajAgAAAA==','1971-02-25 00:01:00.000 +00:00','1971-02-25 00:01:00.000 +00:00') RETURNING * INTO response; EXCEPTION WHEN unique_violation THEN GET STACKED DIAGNOSTICS sequelize_caught_exception = PG_EXCEPTION_DETAIL; END $func_ddc2d624b0384b1fa3b58fffb82bdf7f$ LANGUAGE plpgsql; SELECT (testfunc.response)."id", (testfunc.response)."user_id", (testfunc.response)."data", (testfunc.response)."createdAt", (testfunc.response)."updatedAt", testfunc.sequelize_caught_exception FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc();
Executing (643df7de-adea-4a49-b6f6-dc92a8aa12d9): COMMIT;
Executing (default): SELECT "id", "name", "value", "createdAt", "updatedAt" FROM "main" AS "Main";
[0mGET /v1/variables [32m200[0m 0.000 ms - 786[0m
      âˆš lists all variables for authenticated request (316ms)
[0mGET /v1/variables [33m401[0m 0.000 ms - 38[0m
      âˆš sends 401 for unauthorized request
    @@ variables/<name>
Executing (ecfe3cd3-cb19-4ae8-9362-444e05f5727a): START TRANSACTION;
Executing (ecfe3cd3-cb19-4ae8-9362-444e05f5727a): SELECT "id", "user_id", "data", "createdAt", "updatedAt" FROM "sessions" AS "Session" WHERE "Session"."user_id" = '0229b63ca5f3f32a48c0bf4e' LIMIT 1;
Executing (ecfe3cd3-cb19-4ae8-9362-444e05f5727a): CREATE OR REPLACE FUNCTION pg_temp.testfunc(OUT response "sessions", OUT sequelize_caught_exception text) RETURNS RECORD AS $func_4f0a7b57b7ad4aca8907bf9c785ea7eb$ BEGIN INSERT INTO "sessions" ("id","user_id","data","createdAt","updatedAt") VALUES ('5616c987-89e7-4e21-a091-3ba698a855be','0229b63ca5f3f32a48c0bf4e','H4sIAAAAAAAACquuBQBDv6ajAgAAAA==','1971-02-25 00:01:00.000 +00:00','1971-02-25 00:01:00.000 +00:00') RETURNING * INTO response; EXCEPTION WHEN unique_violation THEN GET STACKED DIAGNOSTICS sequelize_caught_exception = PG_EXCEPTION_DETAIL; END $func_4f0a7b57b7ad4aca8907bf9c785ea7eb$ LANGUAGE plpgsql; SELECT (testfunc.response)."id", (testfunc.response)."user_id", (testfunc.response)."data", (testfunc.response)."createdAt", (testfunc.response)."updatedAt", testfunc.sequelize_caught_exception FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc();
Executing (ecfe3cd3-cb19-4ae8-9362-444e05f5727a): COMMIT;
Executing (default): SELECT "id", "name", "value", "createdAt", "updatedAt" FROM "main" AS "Main" WHERE "Main"."name" = 'test';
[0mGET /v1/variables/test [32m200[0m 0.000 ms - 152[0m
      âˆš fetches single variable for authenticated request (322ms)
Executing (31589dfa-5b9a-41e7-9eca-fe392a2742c9): START TRANSACTION;
Executing (31589dfa-5b9a-41e7-9eca-fe392a2742c9): SELECT "id", "user_id", "data", "createdAt", "updatedAt" FROM "sessions" AS "Session" WHERE "Session"."user_id" = '0229b63ca5f3f32a48c0bf53' LIMIT 1;
Executing (31589dfa-5b9a-41e7-9eca-fe392a2742c9): CREATE OR REPLACE FUNCTION pg_temp.testfunc(OUT response "sessions", OUT sequelize_caught_exception text) RETURNS RECORD AS $func_cff32f84964b430c9082580eeece5650$ BEGIN INSERT INTO "sessions" ("id","user_id","data","createdAt","updatedAt") VALUES ('59ccd2d2-5253-4ece-b441-5b933b6bcb93','0229b63ca5f3f32a48c0bf53','H4sIAAAAAAAACquuBQBDv6ajAgAAAA==','1971-02-25 00:01:00.000 +00:00','1971-02-25 00:01:00.000 +00:00') RETURNING * INTO response; EXCEPTION WHEN unique_violation THEN GET STACKED DIAGNOSTICS sequelize_caught_exception = PG_EXCEPTION_DETAIL; END $func_cff32f84964b430c9082580eeece5650$ LANGUAGE plpgsql; SELECT (testfunc.response)."id", (testfunc.response)."user_id", (testfunc.response)."data", (testfunc.response)."createdAt", (testfunc.response)."updatedAt", testfunc.sequelize_caught_exception FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc();
Executing (31589dfa-5b9a-41e7-9eca-fe392a2742c9): COMMIT;
Executing (default): SELECT "id", "name", "value", "createdAt", "updatedAt" FROM "main" AS "Main" WHERE "Main"."name" = 'test-2';
Executing (default): UPDATE "main" SET "value"=$1,"updatedAt"=$2 WHERE "id" = $3
Executing (default): SELECT "id", "name", "value", "createdAt", "updatedAt" FROM "main" AS "Main" WHERE "Main"."id" = '914edd0d-6390-4553-8b5d-d41635794160';
[0mPOST /v1/variables [32m201[0m 0.000 ms - 156[0m
      âˆš sets variable name/value pair (458ms)
Executing (6eddfb8d-acc8-4240-93d5-2b39d7cecd55): START TRANSACTION;
Executing (6eddfb8d-acc8-4240-93d5-2b39d7cecd55): SELECT "id", "user_id", "data", "createdAt", "updatedAt" FROM "sessions" AS "Session" WHERE "Session"."user_id" = '0229b63ca5f3f32a48c0bf58' LIMIT 1;
Executing (6eddfb8d-acc8-4240-93d5-2b39d7cecd55): CREATE OR REPLACE FUNCTION pg_temp.testfunc(OUT response "sessions", OUT sequelize_caught_exception text) RETURNS RECORD AS $func_1d5816a77de447b89467050dc1748ffc$ BEGIN INSERT INTO "sessions" ("id","user_id","data","createdAt","updatedAt") VALUES ('c0b315b1-d602-4ddc-a07c-73f5595e98a6','0229b63ca5f3f32a48c0bf58','H4sIAAAAAAAACquuBQBDv6ajAgAAAA==','1971-02-25 00:01:00.000 +00:00','1971-02-25 00:01:00.000 +00:00') RETURNING * INTO response; EXCEPTION WHEN unique_violation THEN GET STACKED DIAGNOSTICS sequelize_caught_exception = PG_EXCEPTION_DETAIL; END $func_1d5816a77de447b89467050dc1748ffc$ LANGUAGE plpgsql; SELECT (testfunc.response)."id", (testfunc.response)."user_id", (testfunc.response)."data", (testfunc.response)."createdAt", (testfunc.response)."updatedAt", testfunc.sequelize_caught_exception FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc();
Executing (6eddfb8d-acc8-4240-93d5-2b39d7cecd55): COMMIT;
Executing (default): SELECT "id", "name", "value", "createdAt", "updatedAt" FROM "main" AS "Main" WHERE "Main"."name" = 'test--destroyed';
[0mGET /v1/variables/test--destroyed [32m200[0m 0.000 ms - 4[0m
      âˆš returns NULL for undefined variable name (320ms)
Executing (default): INSERT INTO "main" ("id","name","value","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5) RETURNING "id","name","value","createdAt","updatedAt";
Executing (3741f83c-f22e-4aa6-ae7c-a03f26e3f7bc): START TRANSACTION;
Executing (3741f83c-f22e-4aa6-ae7c-a03f26e3f7bc): SELECT "id", "user_id", "data", "createdAt", "updatedAt" FROM "sessions" AS "Session" WHERE "Session"."user_id" = '0229b63ca5f3f32a48c0bf5d' LIMIT 1;
Executing (3741f83c-f22e-4aa6-ae7c-a03f26e3f7bc): CREATE OR REPLACE FUNCTION pg_temp.testfunc(OUT response "sessions", OUT sequelize_caught_exception text) RETURNS RECORD AS $func_6114258a3a084764b542c71d4de22714$ BEGIN INSERT INTO "sessions" ("id","user_id","data","createdAt","updatedAt") VALUES ('1c2e48a1-9579-46b9-bced-3136dbde8e1a','0229b63ca5f3f32a48c0bf5d','H4sIAAAAAAAACquuBQBDv6ajAgAAAA==','1971-02-25 00:01:00.000 +00:00','1971-02-25 00:01:00.000 +00:00') RETURNING * INTO response; EXCEPTION WHEN unique_violation THEN GET STACKED DIAGNOSTICS sequelize_caught_exception = PG_EXCEPTION_DETAIL; END $func_6114258a3a084764b542c71d4de22714$ LANGUAGE plpgsql; SELECT (testfunc.response)."id", (testfunc.response)."user_id", (testfunc.response)."data", (testfunc.response)."createdAt", (testfunc.response)."updatedAt", testfunc.sequelize_caught_exception FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc();
Executing (3741f83c-f22e-4aa6-ae7c-a03f26e3f7bc): COMMIT;
Executing (default): DELETE FROM "main" WHERE "id" = '9ef0de59-d281-490f-8cff-566de86c8510'
[0mDELETE /v1/variables [32m200[0m 0.000 ms - 17[0m
      âˆš deletes variable by pk/id (385ms)
[0mPOST /v1/variables [33m401[0m 0.000 ms - 38[0m
      âˆš sends 401 for unauthorized set variable request
[0mDELETE /v1/variables [33m401[0m 0.000 ms - 38[0m
      âˆš sends 401 for unauthorized delete variable request
Executing (4c412120-0be9-40da-8d98-20af5b60c74e): START TRANSACTION;
Executing (4c412120-0be9-40da-8d98-20af5b60c74e): SELECT "id", "user_id", "data", "createdAt", "updatedAt" FROM "sessions" AS "Session" WHERE "Session"."user_id" = '0229b63ca5f3f32a48c0bf6a' LIMIT 1;
Executing (4c412120-0be9-40da-8d98-20af5b60c74e): CREATE OR REPLACE FUNCTION pg_temp.testfunc(OUT response "sessions", OUT sequelize_caught_exception text) RETURNS RECORD AS $func_f5f172ce3dc8469bbd42a2e0f3669e95$ BEGIN INSERT INTO "sessions" ("id","user_id","data","createdAt","updatedAt") VALUES ('032fd8f4-2861-4936-a9bf-e80e5915a362','0229b63ca5f3f32a48c0bf6a','H4sIAAAAAAAACquuBQBDv6ajAgAAAA==','1971-02-25 00:01:00.000 +00:00','1971-02-25 00:01:00.000 +00:00') RETURNING * INTO response; EXCEPTION WHEN unique_violation THEN GET STACKED DIAGNOSTICS sequelize_caught_exception = PG_EXCEPTION_DETAIL; END $func_f5f172ce3dc8469bbd42a2e0f3669e95$ LANGUAGE plpgsql; SELECT (testfunc.response)."id", (testfunc.response)."user_id", (testfunc.response)."data", (testfunc.response)."createdAt", (testfunc.response)."updatedAt", testfunc.sequelize_caught_exception FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc();
Executing (4c412120-0be9-40da-8d98-20af5b60c74e): COMMIT;
[0mPOST /v1/variables [33m400[0m 0.000 ms - 69[0m
      âˆš sends 400 for missing variable .name (267ms)
Executing (fcdf2448-50c8-43ed-9441-76d1ffd123bf): START TRANSACTION;
Executing (fcdf2448-50c8-43ed-9441-76d1ffd123bf): SELECT "id", "user_id", "data", "createdAt", "updatedAt" FROM "sessions" AS "Session" WHERE "Session"."user_id" = '0229b63ca5f3f32a48c0bf6f' LIMIT 1;
Executing (fcdf2448-50c8-43ed-9441-76d1ffd123bf): CREATE OR REPLACE FUNCTION pg_temp.testfunc(OUT response "sessions", OUT sequelize_caught_exception text) RETURNS RECORD AS $func_4c6f1f86f44e4d9c80ca5a7f1e7f95a0$ BEGIN INSERT INTO "sessions" ("id","user_id","data","createdAt","updatedAt") VALUES ('e120ccc3-f2e7-45e5-b272-457fe962ec0a','0229b63ca5f3f32a48c0bf6f','H4sIAAAAAAAACquuBQBDv6ajAgAAAA==','1971-02-25 00:01:00.000 +00:00','1971-02-25 00:01:00.000 +00:00') RETURNING * INTO response; EXCEPTION WHEN unique_violation THEN GET STACKED DIAGNOSTICS sequelize_caught_exception = PG_EXCEPTION_DETAIL; END $func_4c6f1f86f44e4d9c80ca5a7f1e7f95a0$ LANGUAGE plpgsql; SELECT (testfunc.response)."id", (testfunc.response)."user_id", (testfunc.response)."data", (testfunc.response)."createdAt", (testfunc.response)."updatedAt", testfunc.sequelize_caught_exception FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc();
Executing (fcdf2448-50c8-43ed-9441-76d1ffd123bf): COMMIT;
[0mPOST /v1/variables [33m400[0m 0.000 ms - 70[0m
      âˆš sends 400 for missing variable .value (273ms)
Executing (2f06fcfe-780a-4713-a8e5-ce772f68fa55): START TRANSACTION;
Executing (2f06fcfe-780a-4713-a8e5-ce772f68fa55): SELECT "id", "user_id", "data", "createdAt", "updatedAt" FROM "sessions" AS "Session" WHERE "Session"."user_id" = '0229b63ca5f3f32a48c0bf74' LIMIT 1;
Executing (2f06fcfe-780a-4713-a8e5-ce772f68fa55): CREATE OR REPLACE FUNCTION pg_temp.testfunc(OUT response "sessions", OUT sequelize_caught_exception text) RETURNS RECORD AS $func_9c2a21b9b0424fa8a68fa3a7a336d719$ BEGIN INSERT INTO "sessions" ("id","user_id","data","createdAt","updatedAt") VALUES ('6849925a-339b-4104-9851-81f793b3fcbf','0229b63ca5f3f32a48c0bf74','H4sIAAAAAAAACquuBQBDv6ajAgAAAA==','1971-02-25 00:01:00.000 +00:00','1971-02-25 00:01:00.000 +00:00') RETURNING * INTO response; EXCEPTION WHEN unique_violation THEN GET STACKED DIAGNOSTICS sequelize_caught_exception = PG_EXCEPTION_DETAIL; END $func_9c2a21b9b0424fa8a68fa3a7a336d719$ LANGUAGE plpgsql; SELECT (testfunc.response)."id", (testfunc.response)."user_id", (testfunc.response)."data", (testfunc.response)."createdAt", (testfunc.response)."updatedAt", testfunc.sequelize_caught_exception FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc();
Executing (2f06fcfe-780a-4713-a8e5-ce772f68fa55): COMMIT;
[0mPOST /v1/variables [33m400[0m 0.000 ms - 127[0m
      âˆš sends 400 for missing input (264ms)

  unit-tests --functions
    @hasOwn(node, field);
      âˆš checks existance of objects own enumerable fields
      âˆš gives `false` for null or undefined values
    @groupByCount(collection);
      âˆš groups collection of primitives in gropus by count
    @testId();
      âˆš generates random strings for testing purpose
    @inlineTemplate({ template, locals });
      âˆš generates html document from handlebars template
    @pickValues(node, ...fields);
      âˆš gets nested object values in a list

  @Sequelize --online
Executing (default): SELECT "value" FROM "main" AS "Main" WHERE "Main"."name" = 'test';
    âˆš test database online (56ms)


  97 passing (32s)

---------------------------------------|---------|----------|---------|---------|-------------------
File                                   | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s 
---------------------------------------|---------|----------|---------|---------|-------------------
All files                              |   84.29 |    60.67 |   73.03 |   84.86 |                   
 src                                   |     100 |      100 |     100 |     100 |                   
  index.js                             |     100 |      100 |     100 |     100 |                   
 src/config                            |   83.23 |    45.45 |   52.38 |   84.11 |                   
  apollo-graphql-http-plugin.js        |     100 |      100 |     100 |     100 |                   
  apollo-graphql.js                    |   86.67 |      100 |     100 |   86.67 | 60-63             
  express.js                           |     100 |       50 |     100 |     100 | 21                
  io.js                                |   73.08 |       25 |   42.86 |   79.17 | 31-34,41,47       
  log-stream.js                        |   66.67 |        0 |       0 |   66.67 | 6-10              
  logger.js                            |    87.5 |       50 |       0 |    87.5 | 44                
  mailer-config.js                     |     100 |      100 |     100 |     100 |                   
  mongoose.js                          |   76.92 |       50 |   66.67 |   76.92 | 10-11,16          
  multer.js                            |   57.89 |        0 |      25 |   57.89 | 11,16-30          
  passport.js                          |   84.62 |       50 |     100 |   83.33 | 17-19             
  rate-limiter.js                      |     100 |      100 |     100 |     100 |                   
  sequelize.js                         |   88.89 |       50 |     100 |   88.89 | 19                
  vars.js                              |     100 |       50 |     100 |     100 | 19-36             
 src/controllers                       |   73.53 |    44.44 |   68.42 |   74.35 |                   
  auth.controller.js                   |     100 |      100 |     100 |     100 |                   
  downolad.controller.js               |      25 |        0 |       0 |   26.19 | 23,30-106         
  index.js                             |     100 |      100 |     100 |     100 |                   
  mail.controller.js                   |     100 |    33.33 |     100 |     100 | 8-15              
  session.controller.js                |     100 |      100 |     100 |     100 |                   
  status.controller.js                 |      50 |      100 |       0 |      50 | 3                 
  testing.controller.js                |     100 |      100 |     100 |     100 |                   
  upload.controller.js                 |   35.71 |        0 |       0 |   38.46 | 12-32             
  user.controller.js                   |   71.64 |    66.67 |   73.33 |   71.43 | ...17-127,135-141 
  variables.controller.js              |   95.45 |       50 |     100 |   95.45 | 29                
 src/errors                            |     100 |       50 |     100 |     100 |                   
  api-error.js                         |     100 |       50 |     100 |     100 | 19                
  extandable-error.js                  |     100 |      100 |     100 |     100 |                   
 src/graphql                           |     100 |      100 |     100 |     100 |                   
  schema.graphql.js                    |     100 |      100 |     100 |     100 |                   
 src/graphql/resolvers                 |     100 |      100 |     100 |     100 |                   
  index.js                             |     100 |      100 |     100 |     100 |                   
  mutation.graphql.js                  |     100 |      100 |     100 |     100 |                   
  query.qraphql.js                     |     100 |      100 |     100 |     100 |                   
 ...aphql/resolvers/mutations/messages |     100 |      100 |     100 |     100 |                   
  add-message.js                       |     100 |      100 |     100 |     100 |                   
  remove-message.js                    |     100 |      100 |     100 |     100 |                   
 src/graphql/resolvers/queries         |     100 |      100 |     100 |     100 |                   
  status.graphql.js                    |     100 |      100 |     100 |     100 |                   
 ...graphql/resolvers/queries/messages |     100 |      100 |     100 |     100 |                   
  find-one-by-id.js                    |     100 |      100 |     100 |     100 |                   
  list.js                              |     100 |      100 |     100 |     100 |                   
 src/graphql/resolvers/queries/testing |     100 |      100 |     100 |     100 |                   
  fake-posts.js                        |     100 |      100 |     100 |     100 |                   
  fake-users.js                        |     100 |      100 |     100 |     100 |                   
 src/middlewares                       |   93.83 |    85.71 |      90 |   93.59 |                   
  auth.js                              |   97.44 |    95.65 |     100 |    97.3 | 40                
  error.js                             |   85.71 |     62.5 |   66.67 |   85.71 | 44,60-64          
  index.js                             |     100 |      100 |     100 |     100 |                   
  roles-guard.js                       |     100 |      100 |     100 |     100 |                   
  session.js                           |    87.5 |       50 |     100 |    87.5 | 10                
 src/models                            |   96.63 |    89.29 |     100 |   96.55 |                   
  passwordResetToken.model.js          |     100 |      100 |     100 |     100 |                   
  refreshToken.model.js                |     100 |      100 |     100 |     100 |                   
  user.model.js                        |   95.08 |    89.29 |     100 |   94.92 | 67,154,220        
 src/models/sequelize                  |   95.65 |      100 |     100 |   95.65 |                   
  index.js                             |   95.65 |      100 |     100 |   95.65 | 67                
 src/models/sequelize/main             |     100 |      100 |     100 |     100 |                   
  index.js                             |     100 |      100 |     100 |     100 |                   
 src/models/sequelize/messages         |     100 |      100 |     100 |     100 |                   
  index.js                             |     100 |      100 |     100 |     100 |                   
 src/models/sequelize/role-user        |   65.22 |        0 |   66.67 |   68.18 |                   
  index.js                             |   65.22 |        0 |   66.67 |   68.18 | 48-68             
 src/models/sequelize/roles            |     100 |      100 |     100 |     100 |                   
  index.js                             |     100 |      100 |     100 |     100 |                   
 src/models/sequelize/session          |   81.82 |      100 |      80 |   81.82 |                   
  index.js                             |   81.82 |      100 |      80 |   81.82 | 6,15              
 src/models/sequelize/tokens           |    87.5 |       50 |     100 |    87.5 |                   
  index.js                             |    87.5 |       50 |     100 |    87.5 | 18-23             
 src/models/sequelize/upload           |   27.78 |        0 |   33.33 |   29.41 |                   
  index.js                             |   27.78 |        0 |   33.33 |   29.41 | 6-31              
 src/routes/v1                         |     100 |       50 |     100 |     100 |                   
  auth.route.js                        |     100 |       50 |     100 |     100 | 53-120            
  download.route.js                    |     100 |      100 |     100 |     100 |                   
  index.js                             |     100 |      100 |     100 |     100 |                   
  mail.route.js                        |     100 |      100 |     100 |     100 |                   
  session.route.js                     |     100 |      100 |     100 |     100 |                   
  status.route.js                      |     100 |      100 |     100 |     100 |                   
  testing.route.js                     |     100 |      100 |     100 |     100 |                   
  upload.route.js                      |     100 |      100 |     100 |     100 |                   
  user.route.js                        |     100 |      100 |     100 |     100 |                   
  variables.route.js                   |     100 |      100 |     100 |     100 |                   
 src/services/emails                   |   42.86 |    14.29 |   14.29 |   44.44 |                   
  emailProvider.js                     |   42.86 |    14.29 |   14.29 |   44.44 | ...0,54-77,81-102 
 src/services/pdf                      |   28.57 |        0 |       0 |   28.57 |                   
  html-to-buffer-pdf.js                |   28.57 |        0 |       0 |   28.57 | 16-32             
 src/utils                             |   95.45 |    61.54 |      85 |    96.3 |                   
  group-by-count.js                    |     100 |      100 |     100 |     100 |                   
  gzip.js                              |     100 |      100 |     100 |     100 |                   
  has-own.js                           |     100 |      100 |     100 |     100 |                   
  index.js                             |     100 |      100 |     100 |     100 |                   
  inline-template.js                   |   94.12 |       40 |     100 |   94.12 | 48                
  next-middleware.js                   |     100 |      100 |     100 |     100 |                   
  pick-values.js                       |     100 |      100 |     100 |     100 |                   
  resolver-context.js                  |     100 |      100 |     100 |     100 |                   
  resolver-middlewares.js              |     100 |      100 |     100 |     100 |                   
  run-validation.js                    |     100 |      100 |     100 |     100 |                   
  set-download-headers.js              |   57.14 |        0 |       0 |   66.67 | 15-16             
  test-id.js                           |     100 |      100 |     100 |     100 |                   
 src/validations                       |     100 |      100 |     100 |     100 |                   
  auth.validation.js                   |     100 |      100 |     100 |     100 |                   
  user.validation.js                   |     100 |      100 |     100 |     100 |                   
 src/validations/checks                |     100 |      100 |     100 |     100 |                   
  index.js                             |     100 |      100 |     100 |     100 |                   
 src/validations/checks/gql-messages   |     100 |      100 |     100 |     100 |                   
  add-message.validation.js            |     100 |      100 |     100 |     100 |                   
  index.js                             |     100 |      100 |     100 |     100 |                   
 src/validations/checks/route-download |     100 |      100 |     100 |     100 |                   
  index.js                             |     100 |      100 |     100 |     100 |                   
 src/validations/checks/route-mail     |     100 |      100 |     100 |     100 |                   
  index.js                             |     100 |      100 |     100 |     100 |                   
 src/validations/checks/route-session  |     100 |      100 |     100 |     100 |                   
  index.js                             |     100 |      100 |     100 |     100 |                   
 src/validations/checks/route-users    |     100 |      100 |     100 |     100 |                   
  index.js                             |     100 |      100 |     100 |     100 |                   
 ...validations/checks/route-variables |     100 |      100 |     100 |     100 |                   
  index.js                             |     100 |      100 |     100 |     100 |                   
---------------------------------------|---------|----------|---------|---------|-------------------
Done in 39.04s.
